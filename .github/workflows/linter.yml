name: Linter

on:
  push: {}

jobs:
  tests:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9']

    name: Python ${{ matrix.python-version }} linter

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python  ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version:  ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap poetry
      shell: bash
      run: |
        python -m ensurepip
        python -m pip install --upgrade pip
        python -m pip install poetry==1.1.11

    - name: Configure poetry
      shell: bash
      run: python -m poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: timeout 10s python -m poetry run pip --version || rm -rf .venv

    - name: Install dependencies
      shell: bash
      run: python -m poetry install --no-root

    - name: Lint with flake8
      shell: bash
      run: python -m poetry run python -m flake8 kalyke

    - name: Lint with mypy
      shell: bash
      run: python -m poetry run python -m mypy --config-file mypy.ini kalyke

    - name: Lint with isort
      shell: bash
      run: python -m poetry run python -m isort --check kalyke

    - name: Lint with black
      run: python -m poetry run python -m black --check kalyke
